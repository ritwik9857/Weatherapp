{"version":3,"sources":["components/weather.component.jsx","components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["weather","props","style","textAlign","color","className","fontSize","city","weathericon","celsius","min","max","margin","minmax","temp_min","temp_max","description","form","error","role","onSubmit","loadweather","type","name","placeholder","autoComplete","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","calcelsius","main","temp","get_weathericon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeID","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fac77451.chunk.js","sourcesContent":["import React from 'react';\r\nconst weather = props =>{\r\n    return(\r\n\r\n        <div style={{textAlign:'center',color:'black'}}className='container'>\r\n            <div className='place'>\r\n                <h1 style={{fontSize:'50px'}}>{props.city}</h1>\r\n                <h5>\r\n                <i style={{fontSize:'70px'}}className={`wi ${props.weathericon}`}></i>\r\n                </h5>\r\n                  {props.celsius?(<h1 style={{fontSize:'50px'}}>{props.celsius}&deg;</h1>):null}\r\n                {minmax(props.temp_min, props.temp_max)}\r\n                <h4 style={{fontSize:'40px'}}>{props.description}</h4>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction minmax(min,max){\r\n    if(min,max){\r\n        return(\r\n            <h3>\r\n        <span style={{fontSize:'40px',margin:'20px'}}>MIN- {min}&deg;</span>\r\n        <span style={{fontSize:'40px',margin:'20px'}}>MAX- {max}&deg;</span>\r\n    </h3>\r\n        );\r\n    }\r\n}\r\nexport default weather;","import React from 'react';\r\nconst form= props =>{\r\n    return(\r\n          \r\n        <div className='container'>\r\n             <div>{props.error?error():null}\r\n             </div>\r\n\r\n             <form onSubmit={props.loadweather}>\r\n \r\n                <input type=\"text\"\r\n                name='city'\r\n                placeholder='city'\r\n                autoComplete='off'\r\n                />\r\n\r\n                <input type=\"text\"\r\n                name='country'\r\n                placeholder='country'\r\n                autoComplete='off'\r\n                />\r\n\r\n                <button>Get Weather</button>\r\n            </form>\r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\nfunction error(){\r\n    return(\r\n        <div style={{color:'white',textAlign:'center'}}role='alert'>Please Enter City And Country Both</div>\r\n    )\r\n}\r\n\r\nexport default form","import React, { Component } from 'react';\n\nimport './components/form.style.css';\nimport Weather from './components/weather.component';\nimport 'weather-icons/css/weather-icons.css';\nimport Form from './components/form.component'\n\nconst API_KEY=\"d60365d22a1b13f1ff3799c5341c4a68\";\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      city:undefined,\n      country:undefined,\n      icon:undefined,\n      main:undefined,\n      celsius:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      description:\"\",\n      error:false\n    };\n   \n    this.weathericon={\n      Thunderstorm:'wi-thunderstorm',\n      Drizzle:'wi-sleet',\n      Rain:'wi-storm-showers',\n      Snow:'wi-snow',\n      Atmosphere:'wi-fog',\n      Clear:'wi-day-sunny',\n      Clouds:'wi-day-fog'\n    }\n  }\n  calcelsius(temp){\n    let cel=Math.floor(temp-273.15)\n    return cel;\n  }\n  get_weathericon(icons,rangeID){\n    switch(true){\n      case rangeID>=200 && rangeID<=232:\n        this.setState({icon:this.weathericon.Thunderstorm})\n        break;\n        case rangeID>=300 && rangeID<=321:\n        this.setState({icon:this.weathericon.Drizzle})\n        break;\n        case rangeID>=500 && rangeID<=531:\n        this.setState({icon:this.weathericon.Rain})\n        break;\n        case rangeID>=600 && rangeID<=622:\n        this.setState({icon:this.weathericon.Snow})\n        break;\n        case rangeID>=701 && rangeID<=781:\n        this.setState({icon:this.weathericon.Atmosphere})\n        break;\n        case rangeID===800:\n        this.setState({icon:this.weathericon.Clear})\n        break;\n        case rangeID>=801 && rangeID<=804:\n        this.setState({icon:this.weathericon.Clouds})\n        break;\n        default:\n          this.setState({icon:this.weathericon.Clouds})\n    }\n  }\n \n\n  getWeather = async (e) =>{\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value\n    if(city&&country){\n    const api_call=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n\n    const response=await api_call.json();\n    console.log(response);\n    this.setState({\n      city:`${response.name},${response.sys.country}`,\n      celsius:this.calcelsius(response.main.temp),\n      temp_max:this.calcelsius(response.main.temp_max),\n      temp_min:this.calcelsius(response.main.temp_min),\n      description:response.weather[0].description,\n      error:false\n    });\n\n    this.get_weathericon(this.weathericon,response.weather[0].id)\n  }\n  else{\n    this.setState({error:true});\n  }\n  };\n  render(){\n  return (\n       <div className='App'>\n         <Form loadweather={this.getWeather}error={this.state.error} />\n         <Weather city={this.state.city} country={this.state.country}\n         celsius={this.state.celsius} temp_max={this.state.temp_max} temp_min={this.state.temp_min}\n         description={this.state.description} weathericon={this.state.icon}\n         />\n       </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}